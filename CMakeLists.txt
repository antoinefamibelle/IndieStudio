cmake_policy(VERSION 3.11)
cmake_minimum_required(VERSION 3.11 FATAL_ERROR)
project("Indie Studio - EPITECH Year End Project" VERSION 1.0.0 LANGUAGES CXX)

macro(SetGlobalCXXProperty)
    enable_language(CXX)
    if (UNIX OR APPLE)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread")
    endif(UNIX OR APPLE)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
    set(CMAKE_CXX_EXTENSIONS OFF)
endmacro()

function(SetCustomMakefileRules)
    add_custom_target(re COMMAND make clean COMMAND make WORKING_DIRECTORY ${CMAKE_CURRENT_BIN_DIR})
    add_custom_target(fclean COMMAND make clean WORKING_DIRECTORY ${CMAKE_CURRENT_BIN_DIR})
endfunction()

macro(SetPathToModule)
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake/modules")
    set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR})
endmacro()

macro(InitCmakeColors)
    include(OutputColor)
endmacro()

function(PrintBasicCmakeInfos)
    message("${Magenta}-> \"${CMAKE_PROJECT_NAME}\" <- ${ColourReset}")
    message("${Magenta}-- La version minimale de CMake demandée est: ${CMAKE_VERSION} ${ColourReset}")
    message("${Magenta}-- La génération se fait actuellement pour ${CMAKE_GENERATOR} ${ColourReset}")
endfunction()

macro(GetOpenGL)
    set(OpenGL_GL_PREFERENCE GLVND)
    find_package(OpenGL QUIET)
endmacro()

macro(GetBoost)
#    if (NOT UNIX OR APPLE)
#        add_definitions( -DBOOST_ALL_DYN_LINK )
#    endif (NOT UNIX OR APPLE)
    set(Boost_USE_STATIC_LIBS OFF) 
    set(Boost_USE_MULTITHREADED ON)  
    set(Boost_USE_STATIC_RUNTIME OFF)
    find_package(Boost 1.69.0 COMPONENTS "thread" "filesystem" "program_options" "regex" "timer" "chrono")
    if (Boost_INCLUDE_DIR)
        message("${Cyan}-- Boost includes founded:")
        message("->  ${Boost_INCLUDE_DIR}")
    else (Boost_INCLUDE_DIR)
        message("${Red}-- Boost includes not founded !")
    endif (Boost_INCLUDE_DIR)
    if (Boost_LIBRARIES)
        message("${Cyan}-- Boost lib(s) founded:")
        foreach(ELEM ${Boost_LIBRARIES})
            message("->  ${ELEM}")
        endforeach(ELEM ${Boost_LIBRARIES})
    else (Boost_LIBRARIES)
        message("${Red}-- Boost lib(s) not founded !")
    endif (Boost_LIBRARIES)
endmacro()

SetGlobalCXXProperty()
SetCustomMakefileRules()
SetPathToModule()
InitCmakeColors()
PrintBasicCmakeInfos()
GetOpenGL()
GetBoost()
add_subdirectory(sources)